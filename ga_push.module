<?php
/**
 * @file ga_push.module
 */

//Methods:
define('GA_PUSH_METHOD_DEFAULT', 'default');
define('GA_PUSH_METHOD_JS', 'javascript');
define('GA_PUSH_METHOD_SSGA', 'ssga');
define('GA_PUSH_METHOD_PHP_GA', 'php-ga');

//Types:
define('GA_PUSH_TYPE_PAGEVIEW', 'pageview');
define('GA_PUSH_TYPE_EVENT', 'event');
define('GA_PUSH_TYPE_ECOMMERCE', 'ecommerce');
define('GA_PUSH_TYPE_CUSTOM_VARIABLE', 'customvariable');
define('GA_PUSH_TYPE_CAMPAING', 'campaing');
define('GA_PUSH_TYPE_SOCIAL', 'social');
define('GA_PUSH_TYPE_SPEED', 'speed');

/**
 * Implements hook_help().
 */
function ga_push_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/help#ga_push':
      return '<p>' . t('A module that push Google Analytics events') . '</p>';
  }
}

/**
 * Implements hook_permissions().
 */
function ga_push_permissions() {
  return array(
    'admin ga push' => array(
      'title' => t('Administer ga push'),
      'description' => t('Perform administration tasks for my ga push.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ga_push_menu() {

  $items['admin/config/system/ga-push'] = array(
    'title' => 'Ga push',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ga_push_settings_form'),
    'access arguments' => array('admin ga push'),
    'description' => 'Global configuration of ga push.',
    'file' => 'inc/ga_push.admin.inc',
  );

  $items['admin/config/system/ga-push/settings'] = array(
    'title' => 'Ga push',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;

}

/**
 * Implements hook_page_alter().
 */
function ga_push_page_alter($main = 0) {
  ga_push_method_javascript_push();
}

/**
 * API for other modules to call in order to add events to the queue.
 *
 * An example API request could be:
 * ga_push_add(array('Category', 'Action', 'Label', 'Value (Numeric)'));
 * @param push (Array)
 * push parameters
 * @param data (Array)
 * TODO: Añadir información
 *  - type: GA_PUSH_TYPE_EVENT
 *  - method : método
 */
function ga_push_add($push, $type = GA_PUSH_TYPE_EVENT, $method_key = NULL) {
  global $user;

  if (is_array($push) && count($push)) {

    // escape any nasty characters, including quote characters which could break the javascript
    foreach ($push as &$value) {
      $value = check_plain($value);
    }

    if (_googleanalytics_visibility_user($user)) {

      //If the select method is not available or is not defined:
      if (is_null($method_key) || $method_key == GA_PUSH_METHOD_DEFAULT || !is_null($method_key) && !ga_push_method_available($method_key, $type)) {
        $default_method_key = variable_get('ga_push_default_method', GA_PUSH_METHOD_JS);
        $method_key = $default_method_key;
      }

      if (!is_null($method_key)) {

        $method = ga_push_get_method($method_key);

        if (isset($method['file'])) require_once($method['file']);

        switch ($type) { //TODO: deprecated!

          case GA_PUSH_TYPE_EVENT:
            //If de 4th argument is not numeric -> NULL
            $push[3] = isset($push[3]) && is_numeric($push[3]) ? $push[3] : 1;
            break;

          case GA_PUSH_TYPE_ECOMMERCE:
            //TODO: COmmerce
            break;

        }

        call_user_func($method['callback'], $push, $type);

      }
      else {
        //TODO: watchdog there's no method available
      }

    }

  }

}

/**
 * Send the ga push to JS on page load
 */
function ga_push_method_javascript_push() {
  if (isset($_SESSION['ga_push'])) {

    $id = variable_get('googleanalytics_account', '');

    if (!empty($id)) {
      $script = 'var _gaq = _gaq || []; ';

      //TODO: ¿Do something with the type?
      foreach ($_SESSION['ga_push'] as $queued) {

        $num = 0;
        $script .= "_gaq.push([";
        $script .= "'_trackEvent', ";
        while ($num < count($queued['push'])) {
          $script .=  ($num != 3) ? "'" . $queued['push'][$num] . "'" : $queued['push'][$num];
          $script .= isset($queued['push'][$num+1]) ? ", " : "";
          $num++;
        }
        $script .= "]); \n";

      }
      //dpm($script, 't');
      unset($_SESSION['ga_push']);

      $options = array(
        'type' => 'inline',
        'scope' => 'footer',
        //'weight' => 0,
        //'group' => JS_DEFAULT,
      );
      drupal_add_js($script, $options);

    }
  }
}

/**
 * Check if a GA PUSH method is available:
 */
function ga_push_method_available($key) {

  $available = FALSE; //Init
  $methods   = ga_push_get_methods();

  $method = $methods[$key];

  if (is_bool($method['available'])) {
    $available = $method['available'];
  }
  elseif(is_string($method['available'])) {
    $available = call_user_func($method['available']);
  }

  return $available;
}

/**
 * Get all ga_push_methods
 */
function ga_push_get_methods() {

  static $callbacks = array();
  if (!count($callbacks)) {
    foreach (module_implements('ga_push_method') as $module) {
      $router_items = call_user_func($module . '_ga_push_method');
      if (isset($router_items) && is_array($router_items)) {
        foreach (array_keys($router_items) as $method) {
          $router_items[$method]['module'] = $module;
        }
        $callbacks = array_merge($callbacks, $router_items);
      }
    }
  }

  return $callbacks;
}

/**
 * Get method
 */
function ga_push_get_method($key) {
  $methods = ga_push_get_methods();
  return isset($methods[$key]) ? $methods[$key] : NULL;
}

/**
 * Returns all available methods as option list:
 */
function ga_push_get_methods_option_list($default = TRUE) {
  $options = array();
  if ($default) {
    $options['default'] = t('Default');
  }
  $methods = ga_push_get_methods();

  foreach ($methods as $key => $method) {
    if (ga_push_method_available($key)) {
      $options[$key] = $method['name'] . ': ' . $method['description'];
    }
  }
  return $options;
}


/**
 * Implements hook_ga_push_method()
 */
function ga_push_ga_push_method() {

  $method[GA_PUSH_METHOD_JS] = array(
    'name' => 'Javascript',
    'description' => 'the action will be send on the next page load',
    'machine_name' => GA_PUSH_METHOD_JS,
    'callback' => 'ga_push_method_javascript',
    'file' => drupal_get_path('module', 'ga_push') . '/inc/ga_push.javascript.inc',
    'implements' => array(
      GA_PUSH_TYPE_EVENT => TRUE,
      GA_PUSH_TYPE_ECOMMERCE => TRUE,
    ),
    'available' => TRUE,
  );

  $method[GA_PUSH_METHOD_SSGA] = array(
    'name' => 'SSGA (php)',
    'description' => 'requires php 5.2+, curl and ssga libraries',
    'machine_name' => GA_PUSH_METHOD_PHP_GA,
    'callback' => 'ga_push_method_ssga',
    'file' => drupal_get_path('module', 'ga_push') . '/inc/ga_push.ssga.inc',
    'implements' => array(
      GA_PUSH_TYPE_EVENT => TRUE,
    ),
    'available' => class_exists('ssga') && is_callable('curl_init'),
  );

  $method[GA_PUSH_METHOD_PHP_GA] = array(
    'name' => 'PHP-GA (php)',
    'description' => 'requires php 5.3 and php-ga libraries',
    'machine_name' => GA_PUSH_METHOD_PHP_GA,
    'callback' => 'ga_push_method_php_ga',
    'file' => drupal_get_path('module', 'ga_push') . '/inc/ga_push.php_ga.inc',
    'implements' => array(
      GA_PUSH_TYPE_EVENT => TRUE,
    ),
    'available' => 'ga_push_method_php_ga_available',
  );

  return $method;

}

/**
 * Check if php_ga is available
 */
function ga_push_method_php_ga_available() {
  $libraries = libraries_get_libraries();
  return strnatcmp(phpversion(),'5.3.0') >= 0 && isset($libraries['php-ga']);
}