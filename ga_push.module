<?php
/**
 * @file ga_push.module
 */

//Methods:
define('GA_PUSH_METHOD_JS', 'javascript');
define('GA_PUSH_METHOD_SSGA', 'ssga');
define('GA_PUSH_METHOD_PHP_GA', 'php-ga');
//Types:
define('GA_PUSH_TYPE_EVENT', 'event');

/**
 * Implements hook_help().
 */
function ga_push_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/help#ga_push':
      return '<p>' . t('A module that push Google Analytics events') . '</p>';
  }
}

/**
 * Implements hook_permissions().
 */
function ga_push_permissions() {
  return array(
    'admin ga push' => array(
      'title' => t('Administer ga push'),
      'description' => t('Perform administration tasks for my ga push.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ga_push_menu() {

  $items['admin/config/system/ga-push'] = array(
    'title' => 'Ga push',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ga_push_settings_form'),
    'access arguments' => array('admin ga push'),
    'description' => 'Global configuration of ga push.',
    'file' => 'inc/ga_push.admin.inc',
  );

  $items['admin/config/system/ga-push/settings'] = array(
    'title' => 'Ga push',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;

}

/**
 * Implements hook_page_alter().
 */
function ga_push_page_alter($main = 0) {
  ga_push_send_js();
}

/**
 * API for other modules to call in order to add events to the queue.
 *
 * An example API request could be:
 * ga_push_add(array('Category', 'Action', 'Label', 'Value (Numeric)'));
 * @param push (Array) push parameters
 * @param data (Array) TODO: Añadir información
 *  - type: GA_PUSH_TYPE_EVENT
 *  - method : método
 */
function ga_push_add($push = array(), $data = array()) {

  global $user;

  $type = isset($data['type']) ? $data['type'] : GA_PUSH_TYPE_EVENT;

  if (is_array($push) && count($push)) {

    // escape any nasty characters, including quote characters which could break the javascript
    foreach ($push as &$value) {
      $value = check_plain($value);
    }

    //If de 4th argument is not numeric -> NULL
    $push[3] = isset($push[3]) && is_numeric($push[3]) ? $push[3] : NULL;

    if (_googleanalytics_visibility_user($user)) {

      $method = variable_get('ga_push_default_method', GA_PUSH_METHOD_JS);

      //Si se solicita un método y está disponible se utiliza, si no se lanza con el método por defecto:
      if (isset($data['method']) && ga_push_method_available($data['method'])) {
        $method = $data['method'];
      }

      switch ($method) {

        case GA_PUSH_METHOD_JS:
          $push_info = array(
            'push' => $push,
            'type' => $type,
          );
          $_SESSION['ga_push'][] = $push_info;
          break;

        case GA_PUSH_METHOD_PHP_GA:
          //@TODO!: add this library
          break;

        case GA_PUSH_METHOD_SSGA:
          module_load_include('inc', 'ga_push', 'inc/ga_push.ssga');
          ga_push_send_php($push, $data);
          break;

      }

    }

  }

}

/**
 * Send the ga push to JS on page load
 */
function ga_push_send_js() {
  if (isset($_SESSION['ga_push'])) {

    $id = variable_get('googleanalytics_account', '');

    if (!empty($id)) {
      $script = 'var _gaq = _gaq || []; ';

      //TODO: ¿Do something with the type?
      foreach($_SESSION['ga_push'] as $queued) {

        $num = 0;
        $script .= "_gaq.push([";
        $script .= "'_trackEvent', ";
        while ($num < count($queued['push'])) {
          $script .=  ($num != 3) ? "'" . $queued['push'][$num] . "'" : $queued['push'][$num];
          $script .= isset($queued['push'][$num+1]) ? ", " : "";
          $num++;
        }
        $script .= "]); \n";

      }
      dpm($script, 't');
      unset($_SESSION['ga_push']);

      $options = array(
        'type' => 'inline',
        'scope' => 'footer',
        //'weight' => 0,
        //'group' => JS_DEFAULT,
      );
      drupal_add_js($script, $options);

    }
  }
}

/**
 * Check if a GA PUSH method is available:
 */
function ga_push_method_available($method) {

  $available = FALSE; //Init

  switch ($method) {

    case GA_PUSH_METHOD_JS:
      $available = TRUE;
      break;

    case GA_PUSH_METHOD_SSGA:
      $available = class_exists('Zend_Http_Client') && libraries_get_path('ssga');
      break;

    case GA_PUSH_METHOD_PHP_GA:
      //$available = FALSE; //@TODO!
      break;

  }

  return $available;

}